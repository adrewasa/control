import com.sun.org.apache.xalan.internal.xsltc.compiler.Copy

apply plugin:'java'
tasks.withType(JavaCompile){
    options.encoding = 'UTF-8'
}
sourceCompatibility=1.8
def jarname='control.jar'

configurations{
    ftpAntTask
}
dependencies {
    compile fileTree(dir:".",include:'lib/**/*.jar')
//    compile fileTree(dir:"${BI_HOME}/nuclear-lib/${branchName}",include:'**/*.jar')
//    compile fileTree(dir:"${BI_HOME}/nuclear-web/${branchName}/build/libs/",include:'**/*.jar')
//    testCompile 'junit:junit:4.12'
}

jar{
//指定生成jar包的名称
    baseName='control'
}

def list=["src"]
//指定源码所在位置：
sourceSets{
    main.java.srcDirs=list
}

//指明无法编译文件所在路径
def dataContent ={def dir ->
    copySpec{
        from ("${dir}"){
            exclude '**/.setting/**',
                    '.classpath',
                    '.project',
                    '**/*.java',
                    '**/*.db',
                    '**/*.g',
                    '**/package.html',
                    '**/*.less',
                    '**/cross/demo/**'
        }
    }
}
ant{
    taskdef(name: 'ftp',
            classname: 'org.apache.tools.ant.taskdefs.optional.net.FTP',
            classpath: configurations.ftpAntTask.asPath)

}



//将非.java文件复制到classes文件夹下 参与打包
task copyFile(type:Copy,dependsOn:compileJava){
    list.each{ def srcDir->
        copy{
            with dataContent.call("${srcDir}")
            into ('build/classes/main')
        }
    }
}
//压缩js
task compressJS(dependsOn:'copyFile'){
    ant.taskdef(name:'yuicompress',classname:'com.yahoo.platform.yui.compressor.YUICompressTask',onerror:'report'){
        classpath{
            pathelement(path:"${BI_HOME}/lib4build/YUIAnt.jar")
            pathelement(path:"${BI_HOME}/lib4build/yuicompressor-2.4.6.jar")

        }
    }
    ant.yuicompress(linebreak:"500",warn:"false", munge:"yes",preserveallsemicolons:"false", charset:"utf-8",encoding:"utf-8",outputfolder:'build/classes/main/'){
        fileset(dir:'build/classes/main/'){
            include (name:'**/*.js')
            include (name:'**/*.css')
            exclude (name:'**/js/template/*.js')
            exclude (name:'**/js/third/*.js')
            exclude (name:'**/cross/demo/**')
            exclude (name:'**/test/**')
        }
    }
}


//混淆代码
task obfuse(dependsOn:'build')<<{
    ant.delete(file:"${buildProjectDir}/${branchName}/build/JAR/tmp/${jarname}")
    ant.mkdir(dir:"${buildProjectDir}/${branchName}/build/JAR/tmp/")
    ant.taskdef(name:'yguard',classname:'com.yworks.yguard.YGuardTask',classpath:"${BI_HOME}/lib4build/yguard.jar")
    ant.yguard(){
        inoutpair(in:"build/libs/${jarname}",out:"${buildProjectDir}/${branchName}/build/JAR/tmp/${jarname}")
        rename(){
            keep{
                method(name:'void main(String[])'){
                    patternset(id:'datapatternset'){
                        include (name:'**.*')
                    }
                }
                method(name:'void readObject(java.io.ObjectInputStream)'){
                    patternset(refid:'datapatternset')
                }
                method(name:'void writeObject(java.io.ObjectOutputStream)'){
                    patternset(refid:'datapatternset')
                }
                field(name:'serialVersionUID'){
                    patternset(refid:'datapatternset')
                }
                'class'(methods:'private',fields:'private'){
                    patternset{
                        include(name:'**.*')
                        exclude(name:'com.fr.report.core.cal.**.*')
                        exclude(name:'com.fr.base.core.util.vt.**.*')
                        exclude(name:'com.fr.web.core.service.**.*')
                    }
                }
            }
        }
    }
    ant.delete(file:'yguardlog.xml')
    ant.delete(dir:"build")
}

//将bilistener.jar 文件copy到package/lib 目录下
task copyjar(dependsOn:'obfuse')<<{
    ant{
        delete(file:"${buildProjectDir}/${branchName}/build/JAR/CN/*.jar")
        mkdir(dir:"${buildProjectDir}/${branchName}/build/JAR/CN/")
        jar(destfile:"${buildProjectDir}/${branchName}/build/JAR/CN/${jarname}"){
            zipfileset(includes:'**/*.*',src:"${buildProjectDir}/${branchName}/build/JAR/tmp/${jarname}")
            //	fileset(dir:"${buildProjectDir}/${branchName}/build/JAR/CN/")
        }
        delete(file:"${buildProjectDir}/${branchName}/build/JAR/tmp/${jarname}")
        delete(file:"${buildProjectDir}/${branchName}/build/package/lib/${jarname}")
        copy(todir:"${buildProjectDir}/${branchName}/build/package/lib"){
            fileset(file:"${buildProjectDir}/${branchName}/build/JAR/CN/${jarname}")
        }
    }
}
//CPD检测代码并将重复代码行数写进数据库
task cpd(dependsOn:copyjar)<<{
    ant{
        path(id:'cpd.classpath'){
            fileset(dir:"${buildProjectDir}/${branchName}/build/"){
                include(name:'CPDJAR/lib/*.jar')
                include(name:'CPDJAR/*.jar')
            }
        }
        echo(message:'CPD检测代码并将重复代码行数写进数据库')
        java(classname:'com.cpd.CPDStart'){
            classpath(refid:'cpd.classpath')
            arg(file:'../../nuclear')
        }
    }
}

task jar_bilistener(dependsOn:'cpd')<<{
    ant.delete(file:"${buildProjectDir}/${branchName}/build/JAR/CN/${jarname}")
}


